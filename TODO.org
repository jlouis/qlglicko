* Current best known configuration
{config,413.6647638198139,0.08,0.345101465830836} Energy: 0.2225166827094691
* Production: Blue
* DONE Deploy: Blue
** DONE Go to erlang.mk for building the software
** DONE Go to relx for building releases
* Deploy: Green
** DONE Split database into schemas
*** DONE CREATE SCHEMA
   There has to be 3 schemas containing raw data:

   S1: Core - The raw data we obtain from QuakeLive

   Then there are a couple of access schemas:

   S4: web - Access for the web front
   S5: processing - Access for the backend system
*** DONE Let the qlglicko system use the Schema views
** DONE Convert qlglicko_core to erlang.mk
*** Remember updating the modules section

** DONE Add connection pools to qlglicko
** TODO Move all calls off pgsql_srv
** TODO Change to binds and portals
** TODO alter database access to match these schemas
** DONE Fix core.player_rankings index
* Deploy: Blue
** Set up varnish in front of the web server
** Correctly update safetyvalve to the newest version
* Make it possible to detect banned players
  We can't currently detect banned players. We should be able to do
  that.
* Do not let banned players rating count
* Handle Players who are removed from the database
  This task will restructure the database in some ways since a player
  will now exist based on a time-frame. This can only be fixed by
  keeping track of "alive" and "dead" players over time.
* When ranking for prediction, we only want the subset
  So: We have 1-13. We learn from 1-10. We then find players in 11-13.
  On this subset of players, we predict for 8-10. Or in general:

  We have 0-K. K-2 to K is the player find part.
               K-5 to K-3 is the subset where we predict.
               0 to K-6 is from where we learn.
* Consider close matches as draws
* What is the optimal length of tournaments? 7 days or 5 days?
  We should be measuring average matches per player
* Optimize!
* Update the qlglicko.dump database, readying up for the next round of tunings.
* fprof the ranking code
  To figure out why things take so much time to run, do an fprof run on rounds 1..10
  so we know what is taking all the time in there. This will hint us toward what kind of
  optimization we should go for and what is currently happening in the code w.r.t
  time usage.
* Update the annealer to make it faster
  · Speed up calculation of duel rounds.
  · Anneal again, this time with per-player rankings.
* Properly handle banned players
	If the player turns out to be banned, the Id of that player is not valid.
	We mark that player by moving him to to banned-list.
	
	Add another field to the duel_match called "valid" and then proceed by
	making this false for every game played by a banned player.
	
	Alternatively, do not pick matches where the player is in the banned list.
	
	Banned players are otherwise treated like unknown players.
